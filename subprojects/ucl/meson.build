project ('ucl', 'c',
         version: '1.3.0',
         license: 'GPL2',
         default_options: [
            'c_std=c89'
         ])

cc = meson.get_compiler('c')
# *************************************************
#   CHECK BUILD ENVIRONMENT
# *************************************************

ucl_cfg = configuration_data()

ucl_endian = build_machine.endian()
if ucl_endian == 'little'
    ucl_cfg.set10 ('ACC_ENDIAN_LITTLE_ENDIAN', true)
elif ucl_endian == 'big'
    ucl_cfg.set10 ('ACC_ENDIAN_BIG_ENDIAN',    true)
else
    error ('Library don\'t build with this endian')
endif

ucl_cfg.set10 ('HAVE_ACCESS'                 , cc.has_function ('access'))
ucl_cfg.set10 ('HAVE_ALLOCA'                 , cc.has_function ('alloca'))
ucl_cfg.set10 ('HAVE_ASSERT_H'               , cc.has_header   ('assert.h'))
ucl_cfg.set10 ('HAVE_ATEXIT'                 , cc.has_function ('atexit'))
ucl_cfg.set10 ('HAVE_ATOI'                   , cc.has_function ('atoi'))
ucl_cfg.set10 ('HAVE_ATOL'                   , cc.has_function ('atol'))
ucl_cfg.set10 ('HAVE_CHMOD'                  , cc.has_function ('chmod'))
ucl_cfg.set10 ('HAVE_CHOWN'                  , cc.has_function ('chown'))
ucl_cfg.set10 ('HAVE_CTIME'                  , cc.has_function ('ctime'))
ucl_cfg.set10 ('HAVE_CTYPE_H'                , cc.has_header   ('ctype.h'))
ucl_cfg.set10 ('HAVE_DIFFTIME'               , cc.has_function ('difftime'))
ucl_cfg.set10 ('HAVE_DIRENT_H'               , cc.has_header   ('dirent.h'))
ucl_cfg.set10 ('HAVE_DLFCN_H'                , cc.has_header   ('dlfcn.h'))
ucl_cfg.set10 ('HAVE_ERRNO_H'                , cc.has_header   ('errno.h'))
ucl_cfg.set10 ('HAVE_FCNTL_H'                , cc.has_header   ('fcntl.h'))
ucl_cfg.set10 ('HAVE_FSTAT'                  , cc.has_function ('fstat'))
ucl_cfg.set10 ('HAVE_GETTIMEOFDAY'           , cc.has_function ('gettimeofday'))
ucl_cfg.set10 ('HAVE_GMTIME'                 , cc.has_function ('gmtime'))
ucl_cfg.set10 ('HAVE_INTTYPES_H'             , cc.has_header   ('inttypes.h'))
ucl_cfg.set10 ('HAVE_LIMITS_H'               , cc.has_header   ('limits.h'))
ucl_cfg.set10 ('HAVE_LOCALTIME'              , cc.has_function ('localtime'))
ucl_cfg.set10 ('HAVE_LONGJMP'                , cc.has_function ('longjmp'))
ucl_cfg.set10 ('HAVE_LSTAT'                  , cc.has_function ('lstat'))
ucl_cfg.set10 ('HAVE_MALLOC_H'               , cc.has_header   ('malloc.h'))
ucl_cfg.set10 ('HAVE_MEMCMP'                 , cc.has_function ('memcmp'))
ucl_cfg.set10 ('HAVE_MEMCPY'                 , cc.has_function ('memcpy'))
ucl_cfg.set10 ('HAVE_MEMMOVE'                , cc.has_function ('memmove'))
ucl_cfg.set10 ('HAVE_MEMORY_H'               , cc.has_header   ('memory.h'))
ucl_cfg.set10 ('HAVE_MEMSET'                 , cc.has_function ('memset'))
ucl_cfg.set10 ('HAVE_MKTIME'                 , cc.has_function ('mktime'))
ucl_cfg.set10 ('HAVE_QSORT'                  , cc.has_function ('qsort'))
ucl_cfg.set10 ('HAVE_RAISE'                  , cc.has_function ('raise'))
ucl_cfg.set10 ('HAVE_SETJMP'                 , cc.has_function ('setjmp'))
ucl_cfg.set10 ('HAVE_SETJMP_H'               , cc.has_header   ('setjmp.h'))
ucl_cfg.set10 ('HAVE_SIGNAL'                 , cc.has_function ('signal'))
ucl_cfg.set10 ('HAVE_SIGNAL_H'               , cc.has_header   ('signal.h'))
ucl_cfg.set10 ('HAVE_SNPRINTF'               , cc.has_function ('snprintf'))
ucl_cfg.set10 ('HAVE_STDARG_H'               , cc.has_header   ('stdarg.h'))
ucl_cfg.set10 ('HAVE_STDDEF_H'               , cc.has_header   ('stddef.h'))
ucl_cfg.set10 ('HAVE_STDINT_H'               , cc.has_header   ('stdint.h'))
ucl_cfg.set10 ('HAVE_STDIO_H'                , cc.has_header   ('stdio.h'))
ucl_cfg.set10 ('HAVE_STDLIB_H'               , cc.has_header   ('stdlib.h'))
ucl_cfg.set10 ('HAVE_STRCASECMP'             , cc.has_function ('strcasecmp'))
ucl_cfg.set10 ('HAVE_STRCHR'                 , cc.has_function ('strchr'))
ucl_cfg.set10 ('HAVE_STRDUP'                 , cc.has_function ('strdup'))
ucl_cfg.set10 ('HAVE_STRERROR'               , cc.has_function ('strerror'))
ucl_cfg.set10 ('HAVE_STRFTIME'               , cc.has_function ('strftime'))
ucl_cfg.set10 ('HAVE_STRICMP'                , cc.has_function ('stricmp'))
ucl_cfg.set10 ('HAVE_STRINGS_H'              , cc.has_header   ('strings.h'))
ucl_cfg.set10 ('HAVE_STRING_H'               , cc.has_header   ('string.h'))
ucl_cfg.set10 ('HAVE_STRNCASECMP'            , cc.has_function ('strncasecmp'))
ucl_cfg.set10 ('HAVE_STRNICMP'               , cc.has_function ('strnicmp'))
ucl_cfg.set10 ('HAVE_STRRCHR'                , cc.has_function ('strrchr'))
ucl_cfg.set10 ('HAVE_STRSTR'                 , cc.has_function ('strstr'))
ucl_cfg.set10 ('HAVE_SYS_STAT_H'             , cc.has_header   ('sys/stat.h'))
ucl_cfg.set10 ('HAVE_SYS_TIME_H'             , cc.has_header   ('sys/time.h'))
ucl_cfg.set10 ('HAVE_SYS_TYPES_H'            , cc.has_header   ('sys/types.h'))
ucl_cfg.set10 ('HAVE_TIME'                   , cc.has_function ('time'))
ucl_cfg.set10 ('HAVE_TIME_H'                 , cc.has_header   ('time.h'))
ucl_cfg.set10 ('HAVE_UMASK'                  , cc.has_function ('umask'))
ucl_cfg.set10 ('HAVE_UNISTD_H'               , cc.has_header   ('unistd.h'))
ucl_cfg.set10 ('HAVE_UTIME'                  , cc.has_function ('utime'))
ucl_cfg.set10 ('HAVE_UTIME_H'                , cc.has_header   ('utime.h'))
ucl_cfg.set10 ('HAVE_VSNPRINTF'              , cc.has_function ('vsnprintf'))
#ucl_cfg.set   ('PACKAGE                     , cc.has_         (''))
#ucl_cfg.set   ('PACKAGE_BUGREPORT           , cc.has_(''))
#ucl_cfg.set   ('PACKAGE_NAME                , cc.has_(''))
#ucl_cfg.set   ('PACKAGE_STRING              , cc.has_(''))
#ucl_cfg.set   ('PACKAGE_TARNAME             , cc.has_(''))
#ucl_cfg.set   ('PACKAGE_VERSION             , cc.has_(''))
#ucl_cfg.set   ('RETSIGTYPE                  , cc.has_(''))
ucl_cfg.set   ('SIZEOF_CHAR_P'               , cc.sizeof('char*'))
ucl_cfg.set   ('SIZEOF_DEV_T'                , cc.sizeof('dev_t'               , prefix : '#include <sys/types.h>' ))
ucl_cfg.set   ('SIZEOF_DOUBLE'               , cc.sizeof('double'))
ucl_cfg.set   ('SIZEOF_FLOAT'                , cc.sizeof('float'))
ucl_cfg.set   ('SIZEOF_FPOS_T'               , cc.sizeof('fpos_t'              , prefix : '#include <stdint.h>' ))
ucl_cfg.set   ('SIZEOF_INT'                  , cc.sizeof('int'))
ucl_cfg.set   ('SIZEOF_INTMAX_T'             , cc.sizeof('intmax_t'            , prefix : '#include <stdint.h>' ))
ucl_cfg.set   ('SIZEOF_INTPTR_T'             , cc.sizeof('intptr_t'            , prefix : '#include <stdint.h>' ))
ucl_cfg.set   ('SIZEOF_LONG'                 , cc.sizeof('long'))
ucl_cfg.set   ('SIZEOF_LONG_DOUBLE'          , cc.sizeof('long double'))
ucl_cfg.set   ('SIZEOF_LONG_LONG'            , cc.sizeof('long long'))
ucl_cfg.set   ('SIZEOF_MODE_T'               , cc.sizeof('mode_t'              , prefix : '#include <sys/types.h>' ))
ucl_cfg.set   ('SIZEOF_OFF_T'                , cc.sizeof('off_t'               , prefix : '#include <sys/types.h>' ))
ucl_cfg.set   ('SIZEOF_PTRDIFF_T'            , cc.sizeof('ptrdiff_t'           , prefix : '#include <stddef.h>' ))
ucl_cfg.set   ('SIZEOF_SHORT'                , cc.sizeof('short'               , prefix : '#include <stdint.h>' ))
ucl_cfg.set   ('SIZEOF_SIZE_T'               , cc.sizeof('size_t'              , prefix : '#include <stddef.h>' ))
ucl_cfg.set   ('SIZEOF_SSIZE_T'              , cc.sizeof('ssize_t'             , prefix : '#include <stddef.h>' ))
ucl_cfg.set   ('SIZEOF_TIME_T'               , cc.sizeof('time_t'              , prefix : '#include <time.h>' ))
ucl_cfg.set   ('SIZEOF_UINTMAX_T'            , cc.sizeof('uintmax_t'           , prefix : '#include <stdint.h>' ))
ucl_cfg.set   ('SIZEOF_UINTPTR_T'            , cc.sizeof('uintptr_t'           , prefix : '#include <stdint.h>' ))
ucl_cfg.set   ('SIZEOF_UNSIGNED_LONG_LONG'   , cc.sizeof('unsigned long long'  , prefix : '#include <stdint.h>' ))
ucl_cfg.set   ('SIZEOF_UNSIGNED___INT32'     , cc.sizeof('unsigned __int32'    , prefix : '#include <stddef.h>' ))
ucl_cfg.set   ('SIZEOF_UNSIGNED___INT64'     , cc.sizeof('unsigned __int64'    , prefix : '#include <stddef.h>' ))
ucl_cfg.set   ('SIZEOF_VOID_P'               , cc.sizeof('void*'))
ucl_cfg.set   ('SIZEOF___INT32'              , cc.sizeof('__int32'             , prefix : '#include <stddef.h>' ))
ucl_cfg.set   ('SIZEOF___INT64'              , cc.sizeof('__int64'             , prefix : '#include <stddef.h>' ))
#ucl_cfg.set   ('STDC_HEADERS                , cc.has_(''))
#ucl_cfg.set   ('TIME_WITH_SYS_TIME          , cc.has_(''))
#ucl_cfg.set   ('VERSION                     , cc.has_(''))
#ucl_cfg.set   ('_FILE_OFFSET_BITS           , cc.has_(''))
#ucl_cfg.set   ('_LARGE_FILES                , cc.has_(''))
#ucl_cfg.set   ('const                       , cc.has_(''))
#ucl_cfg.set   ('off_t                       , cc.has_(''))
#ucl_cfg.set   ('ptrdiff_t                   , cc.has_(''))
#ucl_cfg.set   ('size_t                      , cc.has_(''))

configure_file (input: 'config.h.in',
                output: 'config.h',
                configuration: ucl_cfg)

ucl_inc = include_directories  (join_paths ( ['.','include'] ),
                                '.')
subdir('src')
